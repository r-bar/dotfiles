{ config, pkgs, ... }:
let
  unstable = import <nixpkgs-unstable> {};

  generalPkgs = with pkgs; [
    rclone
    tmux
    bat
    pv
    curlie
    ripgrep
    jq
    yq
    remarshal
    yadm
    git-crypt
    rename
    gnupg
    htop
    lima
    aws-mfa
    fd
  ];

  languagePkgs = with pkgs; [
    rustup
    nodejs
    yarn
    poetry
  ];

  devtoolsPkgs = with pkgs; [
    universal-ctags
    postgresql
    sqlite
    (import ./python-packages.nix { inherit pkgs; })
    python310Packages.j2cli
    git
    watchexec
    exa
    niv
    kube3d
    podman
    podman-compose
    buildah
    hexyl
    neovim
    autoconf
    gcc
  ];

  opsPkgs = with pkgs; [
    kubectl
    kubectx
    kubernetes-helm
    #k3s # not supported for darwin
    ansible
    doctl
    linode-cli
  ];
in

{
  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "ryan";
  home.homeDirectory = "/home/ryan";

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "22.11";

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;


  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
  };

  programs.fzf = {
    enable = true;
    defaultCommand = "fd --type f";
  };

  # extra packages without additional configuration
  home.packages = builtins.concatLists [
    generalPkgs
    languagePkgs
    devtoolsPkgs
    opsPkgs
  ];

  home.file = {
    ".zshrc.d/60-fzf.nix.zsh".text = ''
      if [[ $options[zle] = on ]]; then
        . ${config.programs.fzf.package}/share/fzf/completion.zsh
        . ${config.programs.fzf.package}/share/fzf/key-bindings.zsh
      fi
    '';
  };
}
