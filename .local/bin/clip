#!/usr/bin/env python3
import enum
import os
import sys
import shutil
import socket
import logging
from tempfile import SpooledTemporaryFile
from abc import ABC, abstractmethod
from typing import Optional, Callable
from subprocess import run, SubprocessError, CompletedProcess
from argparse import ArgumentParser


DEFAULT_PORT = 8377
MAX_CLIPBOARD_MEMORY = 10 * 1024 * 1024
OSTYPE = os.environ.get('OSTYPE')
CompletedProcess = Callable[[], CompletedProcess]


class Mode(enum.StrEnum):
    IN = 'in'
    OUT = 'out'


def netloc(arg_str: str) -> tuple[str, int]:
    match arg_str.split(':'):
        case [host]:
            return host, DEFAULT_PORT
        case [host, port]:
            return host, int(port)
        case _:
            raise ValueError(f'Invalid network location: {arg_str}')

class Cli:
    remote: Optional[int]
    stdout: bool

    def __init__(self):
        p = ArgumentParser(description='Inserts into the system clipboard from stdin or prints the clipboard contents to stdout.')
        self.parser = p
        p.add_argument(
            '-l',
            '--listen',
            default=None,
            const=f"127.0.0.1:{DEFAULT_PORT}",
            action="store",
            nargs="?",
            dest="listen",
            type=netloc,
            help='listen on a remote network socket for clipboard data',
        )
        p.add_argument(
            '-r',
            '--remote',
            default=None,
            type=netloc,
            help='send to a remote network socket',
        )
        p.add_argument(
            '-o',
            '--stdout',
            action='store_true',
            help='force printing to stdout',
        )
        p.add_argument(
            '-v',
            '--verbose',
            action='store_true',
            help='enable debug logging',
        )
        self.args = p.parse_args()
        for name, value in vars(self.args).items():
            setattr(self, name, value)

    def mode(self) -> Mode:
        if self.stdout or sys.stdin.isatty():
            return Mode.OUT
        else:
            return Mode.IN


class SystemClipboard(ABC):
    AVAILABLE_INTERFACES: list['SystemClipboard'] = []

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.AVAILABLE_INTERFACES.append(cls)

    @classmethod
    @abstractmethod
    def available(cls) -> bool:
        """Determine if the clipboard interface is available."""
        raise NotImplementedError

    @abstractmethod
    def in_cmd(self) -> CompletedProcess:
        """Return the command to write to the clipboard."""
        raise NotImplementedError

    @abstractmethod
    def out_cmd(self) -> CompletedProcess:
        """Return the command to read from the clipboard."""
        raise NotImplementedError

    @classmethod
    def select_clipboard_interface(cls):
        for interface in cls.AVAILABLE_INTERFACES:
            if interface.available():
                return interface()
        raise RuntimeError('No known clipboard interface for the current platform')


class WaylandClipboard(SystemClipboard):
    @staticmethod
    def socket() -> str | None:
        return os.environ.get('WAYLAND_DISPLAY')

    @classmethod
    def available(cls) -> bool:
        return cls.socket() is not None

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['wl-copy'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        proc = run(['wl-paste'], **kwargs)
        return proc


class X11Clipboard(SystemClipboard):
    @staticmethod
    def socket() -> str | None:
        return os.environ.get('DISPLAY')

    @classmethod
    def available(cls) -> bool:
        return cls.socket() is not None

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['xclip', '-selection', 'clipboard', '-in'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        return run(['xclip', '-selection', 'clipboard', '-out'], **kwargs)


class XselClipboard(SystemClipboard):
    @staticmethod
    def executable() -> str | None:
        """Determine if the xsel program is available."""
        return shutil.which('xsel')

    @classmethod
    def available(cls) -> bool:
        return cls.executable() is not None

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['xsel', '-b'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        return run(['xsel', '-b'], **kwargs)


class MacosClipboard(SystemClipboard):
    @staticmethod
    def available() -> bool:
        return shutil.which('pbcopy') is not None

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['pbcopy'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        return run(['pbpaste'], **kwargs)


class CygwinClipboard(SystemClipboard):
    def available(self) -> bool:
        return OSTYPE.startswith('cygwin') or OSTYPE == 'msys'

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['tee', '/dev/clipboard'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        return run(['cat', '/dev/clipboard'], **kwargs)

class WslClipboard(SystemClipboard):
    def wsl(self) -> bool:
        """Determine if the system is running Windows Subsystem for Linux."""
        return OSTYPE.startswith('linux')

    def in_cmd(self, **kwargs) -> CompletedProcess:
        return run(['clip.exe'], check=True, **kwargs)

    def out_cmd(self, **kwargs) -> CompletedProcess:
        return run(['powershell.exe', '-Command', 'Get-Clipboard'], **kwargs)


class RemoteClipboard:
    def __init__(self, local_clipboard: SystemClipboard, host: str = '127.0.0.1', port: int = DEFAULT_PORT):
        self.local_clipboard = local_clipboard
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def _server(self, client: socket.socket, addr: tuple[str, int]):
        try:
            client_host, client_port = addr
            tmpfile = SpooledTemporaryFile(max_size=MAX_CLIPBOARD_MEMORY, mode="w+b")
            length = 0
            while data := client.recv(1024):
                logging.debug(f"< {repr(data)}")
                tmpfile.write(data)
                length += len(data)
            logging.debug('> "OK"')
            client.send(b'OK')
            tmpfile.seek(0)
            self.local_clipboard.in_cmd(input=tmpfile.read())
            logging.info(f"Received {length} bytes from {client_host}:{client_port}")
        except Exception:
            logging.exception(f"Error receiving clipboard data from {client_host}:{client_port}")
        finally:
            client.close()

    def recv_cmd(self) -> None:
        self.socket.bind((self.host, self.port))
        self.socket.listen(5)
        logging.info(f"Listening on {self.host}:{self.port} for clipboard data.")
        try:
            while True:
                self._server(*self.socket.accept())
        except KeyboardInterrupt:
            pass
        finally:
            self.socket.close()

    def send_cmd(self, data: bytes) -> int:
        self.socket.connect((self.host, self.port))
        self.socket.sendall(data)
        self.socket.close()
        return len(data)


def main() -> int:
    cli = Cli()
    log_level = logging.DEBUG if cli.verbose else logging.INFO
    logging.basicConfig(level=log_level, stream=sys.stderr)
    clipboard = SystemClipboard.select_clipboard_interface()
    logging.debug(f"Selected clipboard interface: {clipboard.__class__.__name__}")

    if cli.listen:
        (host, port) = cli.listen
        remote_clipboard = RemoteClipboard(local_clipboard=clipboard, host=host, port=port)
        remote_clipboard.recv_cmd()
        return 0

    match cli.remote, cli.mode():
        case None, Mode.OUT:
            return clipboard.out_cmd().returncode
        case None, Mode.IN:
            return clipboard.in_cmd().returncode
        case (host, port), Mode.OUT:
            remote_clipboard = RemoteClipboard(local_clipboard=clipboard, host=host, port=port)
            data = clipboard.out_cmd(capture_output=True).stdout
            logging.info(f"Sending {len(data)} bytes to {host}:{port}")
            remote_clipboard.send_cmd(data)
        case (host, port), Mode.IN:
            remote_clipboard = RemoteClipboard(local_clipboard=clipboard, host=host, port=port)
            data = sys.stdin.buffer.read()
            logging.info(f"Sending {len(data)} bytes to {host}:{port}")
            remote_clipboard.send_cmd(data)
        case _:
            raise RuntimeError("Unreachable")
    return 0


if __name__ == '__main__':
    try:
        return_code = main()
    except SubprocessError as exc:
        print(exc.stderr, file=sys.stderr)
        exit(1)
    else:
        exit(return_code)
