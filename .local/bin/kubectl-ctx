#!/usr/bin/env python3

import os
import sys
from argparse import ArgumentParser
from pathlib import Path
from functools import lru_cache
from typing import Optional

import yaml


KUBECONFIGD = Path(os.environ.get("KUBECONFIGD", Path.home() / ".kube" / "config.d"))
KUBECONFIG_SKELETON = {
    "apiVersion": "v1",
    "kind": "Config",
    "preferences": {},
    "current-context": "",
    "contexts": [],
    "clusters": [],
    "users": [],
}

@lru_cache(1)
def kubeconfig():
    path = os.environ.get("KUBECONFIG", str(Path.home() / ".kube" / "config"))
    first_path = path.split(":", maxsplit=1)[0]
    return Path(first_path)


class Cli(ArgumentParser):
    def __init__(self, *, args=sys.argv[1:], **kwargs):
        defaults = dict(
            description="""
            Uses a directory of individual kubeconfig files to manage the kubectl context.
            This is an alternative to setting multiple entries in your KUBECONFIG path since
            many tools do not support this configuration. Using this tool means the config
            in the your KUBECONFIG or the default location (~/.kube/config) will be
            overwritten by the configs stored in KUBECONFIGD (~/.kube/config.d by default).
            You should copy your config to the directory to ensure it is persisted as is and
            not overwritten.
            """
        )
        super().__init__(**(defaults | kwargs))
        self.add_argument(
            "-n", "--namespace", help="Set the namespace used in the context"
        )
        self.add_argument(
            "-l",
            "--list",
            action="store_true",
            default=False,
            help="List available contexts",
        )
        self.add_argument(
            "-r", "--rename", help="Rename a context", action="store_true", default=False
        )
        self.add_argument(
            "context", nargs="?", help="Set the current context if specified"
        )
        self.args = self.parse_args(args)

    def command(self):
        if self.args.rename:
            return "rename"
        elif self.args.list:
            return "list"
        elif self.args.context or self.args.namespace:
            return "set"
        else:
            return "show"



class ConfigManager:
    __slots__ = "contexts", "current_context", "context_files"

    def __init__(self):
        configs = [conf for conf in KUBECONFIGD.glob("*.yaml")]
        with open(kubeconfig()) as f:
            k = yaml.safe_load(f)
        self.current_context = k.get("current-context")
        self.context_files = {}
        self.contexts = {}
        for config in configs:
            with open(config) as f:
                config_data = yaml.safe_load(f)
                self.context_files.update({ctx['name']: config for ctx in config_data["contexts"]})
                self.contexts.update(
                    {ctx["name"]: ctx for ctx in config_data["contexts"]}
                )

    def get_context(self, name: str) -> dict:
        with open(self.context_files[name]) as f:
            return yaml.safe_load(f)

    def set_context(self, context_name: str | None = None, *, namespace: str | None = None):
        context_name = context_name or self.current_context
        ctx_source = self.contexts[context_name]
        ctx_data = self.get_context(context_name)
        ctx_data["current-context"] = context_name
        if namespace:
            for ctx in ctx_data["contexts"]:
                if ctx["name"] == context_name:
                    ctx["context"]["namespace"] = namespace
                    break
        with open(self.context_files[context_name], 'w') as f:
            f.write(yaml.dump(ctx_data))
        with open(kubeconfig(), "w") as f:
            f.write(yaml.dump(ctx_data))

    def get_namespace(self, context_name: str) -> str:
        return self.contexts[context_name]["context"].get("namespace", "default")


def main():
    cli = Cli()
    manager = ConfigManager()
    match cli.command():
        case "set":
            context_name = cli.args.context or manager.current_context
            manager.set_context(context_name=context_name, namespace=cli.args.namespace)
            print(f"Set context to {context_name}")
        case "list":
            for name, config_file in manager.contexts.items():
                if name == manager.current_context:
                    marker = "*"
                else:
                    marker = " "
                label = f"{name}/{manager.get_namespace(name)}"
                print(marker, label)
        case "rename":
            raise NotImplementedError("Rename not implemented yet")
        case "show":
            print("Current context:", manager.current_context)


if __name__ == "__main__":
    main()
