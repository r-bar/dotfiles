#!/usr/bin/env python3

from collections.abc import Iterable
from subprocess import run
import os
import sys
import argparse
from pathlib import Path


class Cli:
    def __init__(self, *, argv=sys.argv[1:], **kwargs):
        description = kwargs.pop(
            'description',
            """
            YAS the YAy Synchronizer. A light wrapper for the yay command line
            tool that allows the user to maintain a package list.
            """
        )
        self.parser = p = argparse.ArgumentParser(description=description, **kwargs)
        conf_dir = Path(os.environ.get('XDG_CONFIG_DIR', Path.home() / '.config'))
        p.add_argument(
            '-p', '--package-file',
            help='package file',
            default=conf_dir / 'yay-sync' / 'packages.txt',
            type=Path,
        )
        p.add_argument('command', default='sync', choices={'add', 'rm', 'sync'}, nargs="?")
        p.add_argument('pkg_names', nargs='*')
        self.args = p.parse_args(argv)


def load_packages(filename: str) -> set[str]:
    try:
        with open(filename, 'r') as file:
            return {
                line.strip() for line in file
                if not line.startswith("#")
            }
    except FileNotFoundError:
        return set()


def write_packages(filename: str, packages: Iterable[str]):
    Path(filename).parent.mkdir(exist_ok=True, parents=True)
    with open(filename, 'w') as file:
        for package in sorted(packages):
            file.write(f"{package}\n")


def add(package_filename: str, packages: list[str]):
    proc = run(['yay', '-Sy', *packages])
    all_packages = load_packages(package_filename)
    if proc.returncode == 0:
        all_packages |= set(packages)
        write_packages(package_filename, all_packages)
    exit(proc.returncode)


def rm(package_filename: str, packages: list[str]):
    proc = run(['yay', '-R', *packages])
    all_packages = load_packages(package_filename)
    if proc.returncode == 0:
        all_packages -= set(packages)
        write_packages(package_filename, all_packages)
    exit(proc.returncode)

def sync(package_filename: str):
    packages = load_packages(package_filename)
    proc = run(['yay', '-Syu', *packages])
    exit(proc.returncode)


def main():
    cli = Cli()
    match cli.args.command:
        case "add":
            add(cli.args.package_file, cli.args.pkg_names)
        case "rm":
            rm(cli.args.package_file, cli.args.pkg_names)
        case "sync":
            sync(cli.args.package_file)
        case _:
            print(f"Unknown command {sys.args.command}")
            exit(1)


if __name__ == "__main__":
    main()
