#!/usr/bin/python3
import re
import sys
from argparse import ArgumentParser, FileType
from pathlib import Path
from typing import (
    Optional,
    Union,
)

from rich import print as rprint


TARGET_RE = re.compile(r'([^:]+)(:(\d+)(:(\d+))?)?')
HISTYLE = 'bold white on red'


def cli() -> ArgumentParser:
    p = ArgumentParser(
        description='Highlight the given line and column in a file.'
    )
    p.add_argument('-c', '--context', default=0, type=int, metavar='N',
                   help='View N lines around each match')
    p.add_argument('-l', '--line-context', type=int, default=sys.maxsize,
                   help='The number of characters on the same line to show'
                   ' around the match')
    p.add_argument('target', nargs='+', help='A file:line:column to view')
    return p


def line_format(
    content: str,
    histart: Optional[int],
    histop: Optional[int] = None,
    line_context: int = sys.maxsize,
) -> str:
    if histart is None:
        return content

    if histop is None:
        histop = histart
    line_start = 0
    line_end = len(content)

    if (ls := histart - 1 - line_context) > 0:
        line_start = ls
    if (le := histop + line_context) < line_end:
        line_end = le

    output = content[line_start:histart-1]
    output += '\033[41m'
    output += content[histart-1:histop]
    output += '\033[0m'
    output += content[histop:line_end]

    return output


def show_target(target: str, context=0, line_context=sys.maxsize):
    m = re.match(TARGET_RE, target)
    if m is None:
        raise ValueError('invalid target string')
    file = m.group(1)
    target_line = None if m.group(3) is None else int(m.group(3))
    target_col = None if m.group(5) is None else int(m.group(5))
    with open(file) as f:
        for i, line in enumerate(f, 1):
            if i < target_line - context:
                continue
            elif i > target_line + context:
                break
            print(target, end=':')
            if i == target_line:
                print(line_format(line.rstrip(), target_col,
                                  line_context=line_context))
            else:
                print(line)


def main():
    args = cli().parse_args()
    for target in args.target:
        show_target(target, args.context, args.line_context)


if __name__ == '__main__':
    main()
