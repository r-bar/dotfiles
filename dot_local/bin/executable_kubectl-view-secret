#!/usr/bin/env -S uv run --script

# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "ruamel.yaml",
# ]
# ///

from base64 import b64decode
from argparse import ArgumentParser, Namespace
import json
from subprocess import run
import sys
import typing as t

import ruamel.yaml

Manifest: t.TypeAlias = dict[str, t.Any]
LT = ruamel.yaml.scalarstring.LiteralScalarString


def decode(data: bytes) -> str:
    try:
        return b64decode(data).decode("utf-8")
    except UnicodeDecodeError:
        return "<binary data>"


def decode_list(data: Manifest) -> None:
    assert data.get("kind") == "List"
    for item in data.get("items", []):
        decode_secret(item)


def decode_secret(data: Manifest) -> None:
    assert data.get("kind") == "Secret"
    for name, value in data.get("data", {}).items():
        data["data"][name] = decode(value)


def prettify(data: Manifest) -> Manifest:
    if isinstance(data, dict):
        return {k: prettify(v) for k, v in data.items()}
    if isinstance(data, list):
        return [prettify(v) for v in data]
    # enforce block quoting on multiline strings
    if isinstance(data, str) and not isinstance(data, LT) and "\n" in data:
        return LT(data)
    return data


def main() -> None:
    cmd = ("kubectl", "get", "secret", *sys.argv[1:], "-o", "yaml")
    proc = run(cmd, check=True, capture_output=True)
    yaml = ruamel.yaml.YAML()
    yaml.preserve_quotes = True
    if proc.returncode != 0:
        sys.stderr.write(proc.stderr)  # type: ignore[arg-type]
        sys.exit(proc.returncode)
    data = yaml.load(proc.stdout)

    if data.get("kind") == "List":
        decode_list(data)
    elif data.get("kind") == "Secret":
        decode_secret(data)

    data = prettify(data)

    yaml.dump(data, sys.stdout)
    sys.stdout.write("\n")


if __name__ == "__main__":
    main()
