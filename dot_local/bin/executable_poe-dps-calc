#!/usr/bin/env python3

from collections.abc import Iterable
from functools import cache, cached_property
from dataclasses import dataclass
from argparse import ArgumentParser, FileType
import re
from subprocess import run
from textwrap import dedent
from typing import Literal, NamedTuple, TypeAlias


class Cli:
    def __init__(self, argv=None):
        self.parser = p = ArgumentParser()
        p.add_argument("-a", "--from-arg", help="Read the item description from the argument text")
        p.add_argument("-f", "--from-file", type=FileType("r"), help="Read the item description from a file")
        p.add_argument("--notify", action="store_true", help="Output text as a notification")
        args = p.parse_args(argv)
        for name, value in vars(args).items():
            setattr(self, name, value)

    def item_data(self) -> "ItemData":
        if self.from_arg:
            return ItemData(self.from_arg)
        elif self.from_file:
            return ItemData(self.from_file.read())
        else:
            raise ValueError("No item data provided")


@dataclass
class DPSResults:
    phys_dps: float
    elem_dps: float
    chaos_dps: float
    total_dps: float

    def __str__(self):
        return dedent(
            f"""
            Physical DPS: {self.phys_dps:.2f}
            Elemental DPS: {self.elem_dps:.2f}
            Chaos DPS: {self.chaos_dps:.2f}
            Total DPS: {self.total_dps:.2f}
            """
        )


class DamageRange(NamedTuple):
    min: int
    max: int

    @classmethod
    def zero(cls):
        return cls(0, 0)

    def avg(self) -> float:
        return sum(self) / 2


class ItemData:
    def __init__(self, text: str):
        self.text = text

    def parse_dmg_range(self, prop_name: str) -> DamageRange:
        prop = self.get_prop(prop_name, section=1)
        if prop is None:
            return DamageRange.zero()
        match = re.search(damage_range_re(), prop)
        if match is None:
            return DamageRange.zero()
        return DamageRange(int(match.group(1)), int(match.group(2)))

    def section(self, num: int) -> Iterable[str]:
        for line in self.text.splitlines():
            if line == "--------":
                num -= 1
                if num >= 0:
                    continue
                else:
                    break
            if num == 0:
                yield line

    def get_prop(self, name: str, section = None) -> str | None:
        if section is None:
            lines = self.text.splitlines()
        else:
            lines = list(self.section(section))
        name = name.strip().removesuffix(": ")
        line_prefix = f"{name}: "
        for line in lines:
            if line.startswith(line_prefix):
                return line.removeprefix(line_prefix)
        return None

    def name(self) -> str:
        header = list(self.section(0))
        return header[-2]

    def base_type(self) -> str:
        header = list(self.section(0))
        return header[-1]

    def item_class(self) -> str:
        return self.get_prop("Item Class", section=0)

    def rarity(self) -> Literal["Normal", "Magic", "Rare", "Unique"]:
        prop = self.get_prop("Rarity")
        if prop is None:
            return "Normal"
        return prop

    def phys_dmg(self) -> DamageRange:
        return self.parse_dmg_range("Physical Damage")

    def fire_dmg(self) -> DamageRange:
        return self.parse_dmg_range("Fire Damage")

    def cold_dmg(self) -> DamageRange:
        return self.parse_dmg_range("Cold Damage")

    def lightning_dmg(self) -> DamageRange:
        return self.parse_dmg_range("Lightning Damage")

    def chaos_dmg(self) -> DamageRange:
        return self.parse_dmg_range("Chaos Damage")

    def critical_hit_chance(self) -> float:
        prop = self.get_prop("Critical Hit Chance")
        if prop is None:
            return 0.0
        match = re.search(float_re(), prop)
        if match is None:
            return 0.0
        return float(match.group(0))

    def attacks_per_second(self) -> float:
        prop = self.get_prop("Attacks per Second")
        if prop is None:
            return 0.0
        match = re.search(float_re(), prop)
        if match is None:
            return 0.0
        return float(match.group(0))

    def quality(self) -> int | None:
        prop = self.get_prop("Quality")
        if prop is None:
            return None
        match = re.search(quality_re(), prop)
        if match is None:
            return None
        return int(match.group(1))

    def item_level(self) -> int | None:
        prop = self.get_prop("Item Level")
        if prop is None:
            return None
        return int(prop)



def calc_dps(
    quality: int = 0,
    phys_dmg: DamageRange = DamageRange(0, 0),
    fire_dmg: DamageRange = DamageRange(0, 0),
    cold_dmg: DamageRange = DamageRange(0, 0),
    lightning_dmg: DamageRange = DamageRange(0, 0),
    chaos_dmg: DamageRange = (0, 0),
    critical_hit_chance: float = 0.0,
    attacks_per_second: float = 0.0,
) -> DPSResults:
    # crit_mult = (1 + (critical_hit_chance / 100)) * 1.5
    crit_mult = 1
    elem_dps = sum((
        fire_dmg.avg(),
        cold_dmg.avg(),
        lightning_dmg.avg(),
    )) * attacks_per_second * crit_mult
    phys_dps = phys_dmg.avg() * attacks_per_second * crit_mult
    chaos_dps = chaos_dmg.avg() * attacks_per_second * crit_mult
    return DPSResults(
        phys_dps=phys_dps,
        elem_dps=elem_dps,
        chaos_dps=chaos_dps,
        total_dps=phys_dps + elem_dps + chaos_dps,
    )


@cache
def damage_range_re() -> re.Pattern:
    return re.compile(r"(\d+)-(\d+)")


@cache
def quality_re() -> re.Pattern:
    return re.compile(r"\+(\d+)%")

@cache
def float_re() -> re.Pattern:
    return re.compile(r"\d+(\.\d+)")


def main():
    cli = Cli()
    item_data = cli.item_data()
    dps = calc_dps(
        quality=item_data.quality() or 0,
        phys_dmg=item_data.phys_dmg(),
        fire_dmg=item_data.fire_dmg(),
        cold_dmg=item_data.cold_dmg(),
        lightning_dmg=item_data.lightning_dmg(),
        chaos_dmg=item_data.chaos_dmg(),
        attacks_per_second=item_data.attacks_per_second(),
        critical_hit_chance=item_data.critical_hit_chance(),
    )
    if cli.notify:
        run(["notify-send", "POE DPS Script", str(dps)], check=True)
    else:
        print(dps)


if __name__ == "__main__":
    main()
